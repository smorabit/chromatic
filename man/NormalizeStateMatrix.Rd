% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scoring.R
\name{NormalizeStateMatrix}
\alias{NormalizeStateMatrix}
\title{Normalize a chromatin state counts matrix}
\usage{
NormalizeStateMatrix(
  state_mat,
  meta,
  pseudocount = 0.5,
  group_by,
  group_name,
  baseline_mu = NULL,
  baseline_sigma = NULL
)
}
\arguments{
\item{state_mat}{A numeric matrix of chromatin state counts with cells as rows
and chromatin states as columns.}

\item{meta}{A data frame containing cell metadata. Must have rownames matching
\code{rownames(state_mat)}.}

\item{pseudocount}{A numeric value added to counts prior to fraction
calculation to avoid division by zero. Default is 0.5.}

\item{group_by}{(Optional) A column name in \code{meta} specifying the variable
used to define a reference cell group.}

\item{group_name}{(Optional) The value within \code{group_by} that defines
the reference group of cells.}

\item{baseline_mu}{(Optional) A numeric vector of baseline means per chromatin
state. If provided, used for reference-based z-scoring.}

\item{baseline_sigma}{(Optional) A numeric vector of baseline standard
deviations per chromatin state. If provided, used for reference-based
z-scoring.}
}
\value{
A list with three elements:
\describe{
\item{\code{frac}}{Matrix of fractions of each chromatin state per cell.}
\item{\code{CLR}}{Matrix of centered log-ratio (CLR) transformed fractions.}
\item{\code{zscore}}{Matrix of z-scored CLR values, either relative to the
full dataset or to a specified reference group.}
}
}
\description{
This function takes a cell-by-chromatin-state counts matrix and produces
three normalized versions: fractions (per cell), centered log-ratio (CLR),
and z-scored CLR values. Optionally, normalization can be performed relative
to a reference cell population defined in the metadata.
}
\examples{
# Normalize a counts matrix without a reference group
out <- NormalizeStateMatrix(state_mat, meta)

# Normalize relative to a reference group
out <- NormalizeStateMatrix(state_mat, meta, group_by = "cluster", group_name = "Excitatory")

}
