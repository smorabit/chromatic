[{"path":"https://smorabit.github.io/chromatic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Morabito. Author, maintainer.","code":""},{"path":"https://smorabit.github.io/chromatic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morabito S (2025). chromatic: Package (One Line, Title Case). R package version 0.0.01, https://smorabit.github.io/chromatic/.","code":"@Manual{,   title = {chromatic: What the Package Does (One Line, Title Case)},   author = {Sam Morabito},   year = {2025},   note = {R package version 0.0.01},   url = {https://smorabit.github.io/chromatic/}, }"},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Peaks with Chromatin States — AnnotatePeaks","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"Assigns peak GRanges object chromatin state largest overlap ChromHMM GRanges annotation. function typically used annotate peaks computing state-level metrics (e.g., erosion entropy scores).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"","code":"AnnotatePeaks(   peaks_gr,   chromHMM_states,   state_col = \"name\",   keep_unannotated = FALSE,   min_overlap = 1 )"},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"peaks_gr GRanges object peak regions annotate. chromHMM_states GRanges object ChromHMM state annotations. Must contain metadata column (default \"name\") specifying state names. state_col Character string specifying metadata column chromHMM_states containing state labels. Default = \"name\". keep_unannotated Logical; TRUE, peaks without overlaps ChromHMM state returned NA annotation column. FALSE (default), unannotated peaks dropped. min_overlap Numeric; minimum overlap width (bp) required peak assigned ChromHMM state. Peaks whose maximum overlap threshold considered unannotated. Default = 1 (overlap).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"GRanges object peaks added metadata columns: annotation — ChromHMM state label. overlap_width — width overlap peak assigned ChromHMM state.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"peak: function finds overlaps peaks ChromHMM states. computes width overlap. assigns peak state largest overlap (min_overlap met). stores overlap width new metadata column (overlap_width). default, peaks without overlap dropped (set keep_unannotated=TRUE retain ).","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"","code":"if (FALSE) { # \\dontrun{ annotated_peaks <- AnnotatePeaks(   peaks_gr = peaks_gr,   chromHMM_states = chromHMM_states,   state_col = \"name\",   keep_unannotated = TRUE,   min_overlap = 50 ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/CalculateEpigenomeScores.html","id":null,"dir":"Reference","previous_headings":"","what":"CalculateEpigenomeScores — CalculateEpigenomeScores","title":"CalculateEpigenomeScores — CalculateEpigenomeScores","text":"wrapper function compute chromatin-state–based scores scATAC-seq data stored Seurat object. function: (1) annotates peaks ChromHMM states, (2) filters peaks sets chromatin state matrix per cell, (3) calculates erosion score (active vs. repressive balance), (4) calculates entropy-based plasticity score.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateEpigenomeScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CalculateEpigenomeScores — CalculateEpigenomeScores","text":"","code":"CalculateEpigenomeScores(   seurat_obj,   chromHMM_states,   stoplist = NULL,   remove_nonstandard_chromosomes = TRUE,   filter_features = TRUE,   min_cells = 100,   min_counts = 100,   state_signs = NULL,   covariates = NULL,   state_col = \"name\",   active_patterns = c(\"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\"),   repressive_patterns = c(\"ReprPC\", \"Quies\", \"Het\"),   pseudocount = 0.5,   assay = \"ATAC\" )"},{"path":"https://smorabit.github.io/chromatic/reference/CalculateEpigenomeScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CalculateEpigenomeScores — CalculateEpigenomeScores","text":"seurat_obj Seurat object containing scATAC-seq data. Must peaks features (rows) cells columns assay specified. chromHMM_states GenomicRanges object containing ChromHMM state annotations. column state labels specified state_col. stoplist (Optional) GenomicRanges object regions exclude (e.g. blacklisted regions). provided, peaks overlapping regions removed. remove_nonstandard_chromosomes Logical; TRUE (default), non-standard chromosomes (e.g. scaffolds) removed peaks chromHMM annotations. filter_features Logical; TRUE (default), peaks filtered exclude features low coverage using ExcludeUncommonPeaks. min_cells Integer; minimum number cells required peak kept (passed ExcludeUncommonPeaks). min_counts Integer; minimum total counts required peak kept (passed ExcludeUncommonPeaks). state_signs Named vector indicating “sign” (active/repressive) chromatin state. NULL (default), generated automatically chromHMM_states using ChromatinStateSigns() patterns provided. covariates (Optional) Character vector covariate column names seurat_obj@meta.data regress scores (e.g. TSS.enrichment, nCount_ATAC). state_col Character; name metadata column chromHMM_states containing state label. active_patterns Character vector patterns used identify active states (passed ChromatinStateSigns()). Default includes \"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\". repressive_patterns Character vector patterns used identify repressive states (passed ChromatinStateSigns()). Default includes \"ReprPC\", \"Quies\", \"Het\". pseudocount Numeric; pseudocount add calculating fractions (used scoring functions). Default = 0.5. assay Character; name Seurat assay containing scATAC data. Default = 'ATAC'.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateEpigenomeScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CalculateEpigenomeScores — CalculateEpigenomeScores","text":"list containing: peaks_gr GenomicRanges filtered annotated peaks. state_matrix Matrix chromatin-state fractions per cell (rows = cells, cols = states). erosion Data frame erosion scores per cell (optionally covariate-regressed). entropy Data frame entropy-based plasticity scores per cell (optionally covariate-regressed).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateEpigenomeScores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CalculateEpigenomeScores — CalculateEpigenomeScores","text":"function orchestrates several steps: Annotates ATAC peak overlapping ChromHMM state. Filters peaks remove blacklisted/nonstandard regions optionally low-coverage peaks. Constructs cell--state matrix (fraction accessibility per state per cell). Computes erosion score (active vs. repressive chromatin balance). Computes entropy-based plasticity score (degree state heterogeneity per cell). helper functions AnnotatePeaks, ExcludeUncommonPeaks, ChromatinStateSigns, CalculateStateMatrix, ErosionScore, EntropyScore must defined return objects expected format.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateEpigenomeScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CalculateEpigenomeScores — CalculateEpigenomeScores","text":"","code":"if (FALSE) { # \\dontrun{ scores <- CalculateEpigenomeScores(     seurat_obj = atac_seurat,     chromHMM_states = chromHMM_mouse,     stoplist = blacklist_gr,     covariates = c(\"TSS.enrichment\",\"nCount_ATAC\") ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"Generates named vector sign values (+1 = repressive, -1 = active, 0 = unclassified) chromatin states based user-specified patterns. typically used weight states functions ErosionScore. Generates named vector sign values (+1 = repressive, -1 = active, 0 = unclassified) chromatin states based user-specified patterns. typically used weight states functions ErosionScore.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"","code":"ChromatinStateSigns(   chromHMM_states,   state_col = \"name\",   active_patterns = c(\"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\"),   repressive_patterns = c(\"ReprPC\", \"Quies\", \"Het\") )  ChromatinStateSigns(   chromHMM_states,   state_col = \"name\",   active_patterns = c(\"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\"),   repressive_patterns = c(\"ReprPC\", \"Quies\", \"Het\") )"},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"chromHMM_states GRanges similar object containing chromatin state annotations metadata column specifying state names. state_col Character string specifying metadata column name chromHMM_states@elementMetadata containing state names. Default = \"name\". active_patterns Character vector regex patterns used identify active states. Default = c(\"TssA\",\"TssFlnk\",\"Tx\",\"EnhA\",\"EnhG\",\"EnhWk\"). repressive_patterns Character vector regex patterns used identify repressive states. Default = c(\"ReprPC\",\"Quies\",\"Het\"). error_if_unclassified Logical indicating whether stop error states remain unclassified (sign = 0). Default = FALSE (issues message instead).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"named numeric vector signs one entry per unique chromatin state: -1: Active state +1: Repressive state 0: Unclassified (match pattern) named numeric vector signs one entry per unique chromatin state: -1: Active state +1: Repressive state 0: Unclassified (match pattern)","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"function: Extracts unique chromatin state names chromHMM_states. Initializes state signs 0 (unclassified). Assigns -1 states matching active_patterns. Assigns +1 states matching repressive_patterns. returned vector can supplied ErosionScore state_signs argument. function: Extracts unique chromatin state names chromHMM_states. Initializes state signs 0 (unclassified). Assigns -1 states matching active_patterns. Assigns +1 states matching repressive_patterns. returned vector can supplied ErosionScore state_signs argument.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"","code":"if (FALSE) { # \\dontrun{ state_signs <- ChromatinStateSigns(   chromHMM_states = chromHMM_gr,   state_col = \"name\",   error_if_unclassified = TRUE ) } # }  if (FALSE) { # \\dontrun{ state_signs <- ChromatinStateSigns(   chromHMM_states = chromHMM_gr,   state_col = \"name\" ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"Computes per-cell entropy scores chromatin state count matrix. function normalizes counts fractions calculates Shannon entropy cell quantify diversity chromatin states (proxy epigenomic plasticity). Optionally, can regress covariates (e.g. sequencing depth, TSS enrichment) return covariate-corrected entropy score.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"","code":"EntropyScore(input, meta, pseudocount = 0.5, covariates = NULL)"},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"input numeric matrix chromatin state counts (rows = cells, columns = states). Typically generated CalculateStateMatrix(). meta data frame cell-level metadata (e.g. seurat_obj@meta.data). Required covariates provided. pseudocount Numeric pseudocount add counts normalization avoid zeros. Default = 0.5. covariates Optional character vector column names meta specifying covariates regress entropy score. Default = NULL.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"data frame : entropy: raw Shannon entropy score per cell (bits). entropy_score_norm: entropy normalized 0–1 range dividing log2(n_states). entropy_score_corrected (covariates given): residual entropy score covariates regressed .","code":""},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"cell: Convert counts per-cell fractions pseudocount. Compute Shannon entropy fraction vector (entropy::entropy(p, unit=\"log2\")). Normalize entropy score dividing log2(n_states) (maximum possible entropy) scale 0 1. covariates supplied, linear model fit specified covariates predictors raw entropy score. residuals model returned covariate-corrected entropy score.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"","code":"if (FALSE) { # \\dontrun{ entropy_df <- EntropyScore(   input = state_matrix,   meta = seurat_obj@meta.data,   covariates = c(\"TSS.enrichment\", \"nCount_ATAC\") ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"Computes cell-level epigenomic erosion scores chromatin state count matrix. function performs fraction normalization, centered log-ratio (CLR) transformation, z-scoring, applies state-specific sign vector (+1 repressive states, -1 active states). Optionally, can regress covariates (e.g., TSS enrichment, nCount_ATAC) resulting erosion scores.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"","code":"ErosionScore(input, meta, state_signs, pseudocount = 0.5, covariates = NULL)"},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"input numeric matrix chromatin state counts cells rows states columns. Typically produced CalculateStateMatrix(). meta data frame (seurat_obj@meta.data) containing cell-level metadata. Required covariate regression performed. state_signs named numeric vector indicating sign (+1 -1) chromatin state. Names must match column names input. pseudocount numeric value add counts avoid division zero. Default 0.5. covariates character vector column names meta specifying covariates regress erosion score. Default NULL.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"data frame : Z-scored values state per cell (columns = states). erosion_score: raw erosion score per cell. erosion_score_corrected (covariates given): residual erosion score covariates regressed .","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"erosion score calculated : Normalize counts per cell fractions. Apply log transform center across states. Z-score state across cells. Multiply z-scored states sign vector (+1 repressive, -1 active). Sum across states obtain one erosion score per cell. covariates supplied, linear model fit using specified covariates predictors erosion score. residuals model returned covariate-corrected erosion score.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"","code":"if (FALSE) { # \\dontrun{ erosion_df <- ErosionScore(   input = state_matrix,   meta = seurat_obj@meta.data,   state_signs = state_signs,   covariates = c(\"TSS.enrichment\", \"nCount_ATAC\") ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"Filters peaks rarely observed across cells low total counts peak--cell matrix. simple feature selection step prior downstream analyses (e.g., entropy erosion scores).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"","code":"ExcludeUncommonPeaks(   peaks_gr,   peaks_mat,   min_cells = 100,   min_counts = 100,   verbose = TRUE )"},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"peaks_gr GRanges object containing genomic coordinates peaks. Rows correspond peaks peaks_mat. peaks_mat numeric matrix peak counts (rows = peaks, columns = cells). min_cells Integer; minimum number cells peak must detected (nonzero counts) retained. Default = 100. min_counts Integer; minimum total counts across cells peak retained. Default = 100. verbose Logical; TRUE, print message summarizing many peaks retained/filtered. Default = TRUE.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"named list : peaks_gr — filtered GRanges object peaks. peaks_mat — filtered peak--cell count matrix.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"function applies two filters: peak must present (nonzero) least min_cells cells. peak must least min_counts total counts across cells. Peaks passing filters retained output. step helps reduce noise memory usage large peak--cell matrices.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"","code":"if (FALSE) { # \\dontrun{ filtered <- ExcludeUncommonPeaks(   peaks_gr = peaks_gr,   peaks_mat = peaks_mat,   min_cells = 200,   min_counts = 500,   verbose = TRUE ) filtered$peaks_gr filtered$peaks_mat } # }"}]
