[{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://smorabit.github.io/chromatic/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://smorabit.github.io/chromatic/articles/scATAC.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"chromatic in scATAC-seq","text":"tutorial demonstrates key functionality chromatic calculate cell-level chromatin entropy scores scATAC-seq dataset. tutorial, demonstrate package dataset colorectal cancer tumors profiled 10X Genomics Multiome (ATAC + RNA), although ATAC assay needed analysis. time dataset currently available public, future update tutorial use publicly available dataset. follow along tutorial, please use dataset.","code":""},{"path":"https://smorabit.github.io/chromatic/articles/scATAC.html","id":"load-the-dataset-and-required-libraries","dir":"Articles","previous_headings":"Introduction","what":"Load the dataset and required libraries","title":"chromatic in scATAC-seq","text":"First load processed dataset required R libraries tutorial. Plot ","code":"# single-cell analysis packages library(Seurat) library(Signac)  # data / plotting packages library(tidyverse) library(cowplot) library(patchwork) theme_set(theme_cowplot())  # additional Genomics packages library(EnsDb.Hsapiens.v86) library(BSgenome.Hsapiens.UCSC.hg38) library(GenomicRanges) library(rtracklayer)   # load the processed Seurat object seurat_obj <- readRDS(\"CRC_Tumor_multiome.rds\")"},{"path":[]},{"path":"https://smorabit.github.io/chromatic/articles/scATAC.html","id":"set-up-chromatin-states","dir":"Articles","previous_headings":"Run chromatic","what":"Set up chromatin states","title":"chromatic in scATAC-seq","text":"chromatic requires set chromatin state annotations order calculate chromatin entropy scores.","code":""},{"path":[]},{"path":[]},{"path":"https://smorabit.github.io/chromatic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Morabito. Author, maintainer.","code":""},{"path":"https://smorabit.github.io/chromatic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morabito S (2025). chromatic:. R package version 0.0.01, https://smorabit.github.io/chromatic/.","code":"@Manual{,   title = {chromatic:},   author = {Sam Morabito},   year = {2025},   note = {R package version 0.0.01},   url = {https://smorabit.github.io/chromatic/}, }"},{"path":"https://smorabit.github.io/chromatic/index.html","id":"chromatic","dir":"","previous_headings":"","what":"","title":"","text":"chromatic R package analyzing chromatin state heterogeneity high-dimensional epigenomic sequencing assays, scATAC-seq. chromatic calculates cell-level chromatin entropy scores based cell’s usage different chromatin states (enhancers, promoters, silencers, etc). Chromatin entropy scores can indicate important cell populations reveal epigenomic remodeling underlying cell state changes across many systems including neurodegeneration, cancer, development. chromatic active development, currently alpha version. means features final package missing, current features subject change throughout development. first major release chromatic coincide forthcoming publication.","code":""},{"path":"https://smorabit.github.io/chromatic/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"","text":"Now install chromatic within R using devtools.","code":"# create a new conda environment conda create -n chromatic -c conda-forge python=3.11 mamba  conda activate chromatic  # install dependencies using mamba mamba install -c conda-forge -c bioconda \\   r-base=4.4 \\   r-seurat \\   r-signac \\   r-devtools \\   r-hdf5r \\   bioconductor-tfbstools \\   bioconductor-rtracklayer \\   bioconductor-genomicranges \\   bioconductor-motifmatchr \\    macs2 devtools::install_github('smorabit/chromatic')"},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Peaks with Chromatin States — AnnotatePeaks","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"Assigns peak GRanges object chromatin state largest overlap ChromHMM GRanges annotation. function typically used annotate peaks computing state-level metrics (e.g., erosion entropy scores).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"","code":"AnnotatePeaks(   peaks_gr,   chromHMM_states,   state_col = \"name\",   keep_unannotated = FALSE,   min_overlap = 1 )"},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"peaks_gr GRanges object peak regions annotate. chromHMM_states GRanges object ChromHMM state annotations. Must contain metadata column (default \"name\") specifying state names. state_col Character string specifying metadata column chromHMM_states containing state labels. Default = \"name\". keep_unannotated Logical; TRUE, peaks without overlaps ChromHMM state returned NA annotation column. FALSE (default), unannotated peaks dropped. min_overlap Numeric; minimum overlap width (bp) required peak assigned ChromHMM state. Peaks whose maximum overlap threshold considered unannotated. Default = 1 (overlap).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"GRanges object peaks added metadata columns: annotation — ChromHMM state label. overlap_width — width overlap peak assigned ChromHMM state.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"peak: function finds overlaps peaks ChromHMM states. computes width overlap. assigns peak state largest overlap (min_overlap met). stores overlap width new metadata column (overlap_width). default, peaks without overlap dropped (set keep_unannotated=TRUE retain ).","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/AnnotatePeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate Peaks with Chromatin States — AnnotatePeaks","text":"","code":"if (FALSE) { # \\dontrun{ annotated_peaks <- AnnotatePeaks(   peaks_gr = peaks_gr,   chromHMM_states = chromHMM_states,   state_col = \"name\",   keep_unannotated = TRUE,   min_overlap = 50 ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/CalculateStateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate per-cell chromatin state counts from annotated peaks — CalculateStateMatrix","title":"Calculate per-cell chromatin state counts from annotated peaks — CalculateStateMatrix","text":"helper function aggregates peak--cell matrix chromatin state–-cell matrix based state annotations assigned peak. cell’s counts across peaks belonging chromatin state summed produce per-state count matrix, transposed return cell--state matrix suitable downstream analyses.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateStateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate per-cell chromatin state counts from annotated peaks — CalculateStateMatrix","text":"","code":"CalculateStateMatrix(peaks_mat, peaks_gr)"},{"path":"https://smorabit.github.io/chromatic/reference/CalculateStateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate per-cell chromatin state counts from annotated peaks — CalculateStateMatrix","text":"peaks_mat sparse dense matrix peak accessibility counts (rows = peaks, columns = cells). Typically obtained GetAssayData ATAC assay. peaks_gr GRanges object length number rows peaks_mat, containing least one column named annotation giving chromatin state label peak.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateStateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate per-cell chromatin state counts from annotated peaks — CalculateStateMatrix","text":"cell--state matrix summed fragment counts per chromatin state (rows = cells, columns = chromatin states).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateStateMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate per-cell chromatin state counts from annotated peaks — CalculateStateMatrix","text":"function assumes row peaks_mat corresponds peak corresponding entry peaks_gr, peak valid chromatin state annotation peaks_gr$annotation. Peaks state annotation grouped counts summed across cells. resulting state--cell matrix transposed return cell--state counts.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/CalculateStateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate per-cell chromatin state counts from annotated peaks — CalculateStateMatrix","text":"","code":"# peaks_mat: peaks x cells matrix from ATAC assay # peaks_gr: GRanges of peaks with 'annotation' column state_matrix <- CalculateStateMatrix(peaks_mat, peaks_gr) #> Error: object 'peaks_mat' not found"},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"Generates named vector sign values (+1 = repressive, -1 = active, 0 = unclassified) chromatin states based user-specified patterns. typically used weight states functions ErosionScore. Generates named vector sign values (+1 = repressive, -1 = active, 0 = unclassified) chromatin states based user-specified patterns. typically used weight states functions ErosionScore.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"","code":"ChromatinStateSigns(   chromHMM_states,   state_col = \"name\",   active_patterns = c(\"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\"),   repressive_patterns = c(\"ReprPC\", \"Quies\", \"Het\") )  ChromatinStateSigns(   chromHMM_states,   state_col = \"name\",   active_patterns = c(\"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\"),   repressive_patterns = c(\"ReprPC\", \"Quies\", \"Het\") )"},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"chromHMM_states GRanges similar object containing chromatin state annotations metadata column specifying state names. state_col Character string specifying metadata column name chromHMM_states@elementMetadata containing state names. Default = \"name\". active_patterns Character vector regex patterns used identify active states. Default = c(\"TssA\",\"TssFlnk\",\"Tx\",\"EnhA\",\"EnhG\",\"EnhWk\"). repressive_patterns Character vector regex patterns used identify repressive states. Default = c(\"ReprPC\",\"Quies\",\"Het\"). error_if_unclassified Logical indicating whether stop error states remain unclassified (sign = 0). Default = FALSE (issues message instead).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"named numeric vector signs one entry per unique chromatin state: -1: Active state +1: Repressive state 0: Unclassified (match pattern) named numeric vector signs one entry per unique chromatin state: -1: Active state +1: Repressive state 0: Unclassified (match pattern)","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"function: Extracts unique chromatin state names chromHMM_states. Initializes state signs 0 (unclassified). Assigns -1 states matching active_patterns. Assigns +1 states matching repressive_patterns. returned vector can supplied ErosionScore state_signs argument. function: Extracts unique chromatin state names chromHMM_states. Initializes state signs 0 (unclassified). Assigns -1 states matching active_patterns. Assigns +1 states matching repressive_patterns. returned vector can supplied ErosionScore state_signs argument.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/ChromatinStateSigns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Active/Repressive Signs to Chromatin States — ChromatinStateSigns","text":"","code":"if (FALSE) { # \\dontrun{ state_signs <- ChromatinStateSigns(   chromHMM_states = chromHMM_gr,   state_col = \"name\",   error_if_unclassified = TRUE ) } # }  if (FALSE) { # \\dontrun{ state_signs <- ChromatinStateSigns(   chromHMM_states = chromHMM_gr,   state_col = \"name\" ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"Computes per-cell entropy scores chromatin state count matrix. function normalizes counts fractions calculates Shannon entropy cell quantify diversity chromatin states (proxy epigenomic plasticity). Optionally, can regress covariates (e.g. sequencing depth, TSS enrichment) return covariate-corrected entropy score.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"","code":"EntropyScore(input, meta, pseudocount = 0.5, covariates = NULL)"},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"input numeric matrix chromatin state counts (rows = cells, columns = states). Typically generated CalculateStateMatrix(). meta data frame cell-level metadata (e.g. seurat_obj@meta.data). Required covariates provided. pseudocount Numeric pseudocount add counts normalization avoid zeros. Default = 0.5. covariates Optional character vector column names meta specifying covariates regress entropy score. Default = NULL.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"data frame : entropy: raw Shannon entropy score per cell (bits). entropy_score_norm: entropy normalized 0–1 range dividing log2(n_states). entropy_score_corrected (covariates given): residual entropy score covariates regressed .","code":""},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"cell: Convert counts per-cell fractions pseudocount. Compute Shannon entropy fraction vector (entropy::entropy(p, unit=\"log2\")). Normalize entropy score dividing log2(n_states) (maximum possible entropy) scale 0 1. covariates supplied, linear model fit specified covariates predictors raw entropy score. residuals model returned covariate-corrected entropy score.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/EntropyScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cell-Level Chromatin State Entropy (Plasticity) Scores — EntropyScore","text":"","code":"if (FALSE) { # \\dontrun{ entropy_df <- EntropyScore(   input = state_matrix,   meta = seurat_obj@meta.data,   covariates = c(\"TSS.enrichment\", \"nCount_ATAC\") ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"Computes cell-level epigenomic erosion scores chromatin state count matrix. function performs fraction normalization, centered log-ratio (CLR) transformation, z-scoring, applies state-specific sign vector (+1 repressive states, -1 active states). Optionally, can regress covariates (e.g., TSS enrichment, nCount_ATAC) resulting erosion scores.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"","code":"ErosionScore(input, meta, state_signs, pseudocount = 0.5, covariates = NULL)"},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"input numeric matrix chromatin state counts cells rows states columns. Typically produced CalculateStateMatrix(). meta data frame (seurat_obj@meta.data) containing cell-level metadata. Required covariate regression performed. state_signs named numeric vector indicating sign (+1 -1) chromatin state. Names must match column names input. pseudocount numeric value add counts avoid division zero. Default 0.5. covariates character vector column names meta specifying covariates regress erosion score. Default NULL.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"data frame : Z-scored values state per cell (columns = states). erosion_score: raw erosion score per cell. erosion_score_corrected (covariates given): residual erosion score covariates regressed .","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"erosion score calculated : Normalize counts per cell fractions. Apply log transform center across states. Z-score state across cells. Multiply z-scored states sign vector (+1 repressive, -1 active). Sum across states obtain one erosion score per cell. covariates supplied, linear model fit using specified covariates predictors erosion score. residuals model returned covariate-corrected erosion score.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/ErosionScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Erosion Scores from Chromatin State Matrices — ErosionScore","text":"","code":"if (FALSE) { # \\dontrun{ erosion_df <- ErosionScore(   input = state_matrix,   meta = seurat_obj@meta.data,   state_signs = state_signs,   covariates = c(\"TSS.enrichment\", \"nCount_ATAC\") ) } # }"},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"Filters peaks rarely observed across cells low total counts peak--cell matrix. simple feature selection step prior downstream analyses (e.g., entropy erosion scores).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"","code":"ExcludeUncommonPeaks(   peaks_gr,   peaks_mat,   min_cells = 100,   min_counts = 100,   verbose = TRUE )"},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"peaks_gr GRanges object containing genomic coordinates peaks. Rows correspond peaks peaks_mat. peaks_mat numeric matrix peak counts (rows = peaks, columns = cells). min_cells Integer; minimum number cells peak must detected (nonzero counts) retained. Default = 100. min_counts Integer; minimum total counts across cells peak retained. Default = 100. verbose Logical; TRUE, print message summarizing many peaks retained/filtered. Default = TRUE.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"named list : peaks_gr — filtered GRanges object peaks. peaks_mat — filtered peak--cell count matrix.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"function applies two filters: peak must present (nonzero) least min_cells cells. peak must least min_counts total counts across cells. Peaks passing filters retained output. step helps reduce noise memory usage large peak--cell matrices.","code":""},{"path":[]},{"path":"https://smorabit.github.io/chromatic/reference/ExcludeUncommonPeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude Lowly Detected or Low-Count Peaks — ExcludeUncommonPeaks","text":"","code":"if (FALSE) { # \\dontrun{ filtered <- ExcludeUncommonPeaks(   peaks_gr = peaks_gr,   peaks_mat = peaks_mat,   min_cells = 200,   min_counts = 500,   verbose = TRUE ) filtered$peaks_gr filtered$peaks_mat } # }"},{"path":"https://smorabit.github.io/chromatic/reference/FetchChromatinStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Roadmap ChromHMM Segmentation as GRanges — FetchChromatinStates","title":"Download Roadmap ChromHMM Segmentation as GRanges — FetchChromatinStates","text":"Download Roadmap ChromHMM Segmentation GRanges","code":""},{"path":"https://smorabit.github.io/chromatic/reference/FetchChromatinStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Roadmap ChromHMM Segmentation as GRanges — FetchChromatinStates","text":"","code":"FetchChromatinStates(   model = 18,   tissue,   genome = c(\"hg19\", \"hg38\"),   mnemonics = TRUE,   cache_dir = \"~/.chromatic_cache\" )"},{"path":"https://smorabit.github.io/chromatic/reference/FetchChromatinStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Roadmap ChromHMM Segmentation as GRanges — FetchChromatinStates","text":"model ChromHMM model. One 15, 18, 25. tissue Tissue code (e.g. \"E075\") human-readable name (e.g. \"Liver\"). genome Genome build. One \"hg19\" \"hg38\". mnemonics Logical. TRUE (default), download mnemonics version (state names). FALSE, download raw numeric states version. cache_dir Directory cache downloads (default \"~/.chromatic_cache\").","code":""},{"path":"https://smorabit.github.io/chromatic/reference/FetchChromatinStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Roadmap ChromHMM Segmentation as GRanges — FetchChromatinStates","text":"GRanges object ChromHMM state annotations.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/FetchChromatinStates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Roadmap ChromHMM Segmentation as GRanges — FetchChromatinStates","text":"","code":"chromHMM <- FetchChromatinStates(model = 18, tissue = \"E075\", genome = \"hg38\") #> Downloading ChromHMM segmentation from: https://egg2.wustl.edu/roadmap/data/byFileType/chromhmmSegmentations/ChmmModels/core_K27ac/jointModel/final/E075_18_core_K27ac_hg38lift_mnemonics.bed.gz #> Error in FetchChromatinStates(model = 18, tissue = \"E075\", genome = \"hg38\"): Package 'rtracklayer' is required. Please install it."},{"path":"https://smorabit.github.io/chromatic/reference/RunChromatic.html","id":null,"dir":"Reference","previous_headings":"","what":"RunChromatic — RunChromatic","title":"RunChromatic — RunChromatic","text":"wrapper function compute chromatin-state–based scores scATAC-seq data stored Seurat object. function: (1) annotates peaks ChromHMM states, (2) filters peaks sets chromatin state matrix per cell, (3) calculates erosion score (active vs. repressive balance), (4) calculates entropy-based plasticity score.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/RunChromatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunChromatic — RunChromatic","text":"","code":"RunChromatic(   seurat_obj,   chromHMM_states,   stoplist = NULL,   remove_nonstandard_chromosomes = TRUE,   filter_features = TRUE,   min_cells = 100,   min_counts = 100,   state_signs = NULL,   covariates = NULL,   state_col = \"name\",   active_patterns = c(\"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\"),   repressive_patterns = c(\"ReprPC\", \"Quies\", \"Het\"),   pseudocount = 0.5,   assay = \"ATAC\" )"},{"path":"https://smorabit.github.io/chromatic/reference/RunChromatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunChromatic — RunChromatic","text":"seurat_obj Seurat object containing scATAC-seq data. Must peaks features (rows) cells columns assay specified. chromHMM_states GenomicRanges object containing ChromHMM state annotations. column state labels specified state_col. stoplist (Optional) GenomicRanges object regions exclude (e.g. blacklisted regions). provided, peaks overlapping regions removed. remove_nonstandard_chromosomes Logical; TRUE (default), non-standard chromosomes (e.g. scaffolds) removed peaks chromHMM annotations. filter_features Logical; TRUE (default), peaks filtered exclude features low coverage using ExcludeUncommonPeaks. min_cells Integer; minimum number cells required peak kept (passed ExcludeUncommonPeaks). min_counts Integer; minimum total counts required peak kept (passed ExcludeUncommonPeaks). state_signs Named vector indicating “sign” (active/repressive) chromatin state. NULL (default), generated automatically chromHMM_states using ChromatinStateSigns() patterns provided. covariates (Optional) Character vector covariate column names seurat_obj@meta.data regress scores (e.g. TSS.enrichment, nCount_ATAC). state_col Character; name metadata column chromHMM_states containing state label. active_patterns Character vector patterns used identify active states (passed ChromatinStateSigns()). Default includes \"TssA\", \"TssFlnk\", \"Tx\", \"EnhA\", \"EnhG\", \"EnhWk\". repressive_patterns Character vector patterns used identify repressive states (passed ChromatinStateSigns()). Default includes \"ReprPC\", \"Quies\", \"Het\". pseudocount Numeric; pseudocount add calculating fractions (used scoring functions). Default = 0.5. assay Character; name Seurat assay containing scATAC data. Default = 'ATAC'.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/RunChromatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RunChromatic — RunChromatic","text":"list containing: peaks_gr GenomicRanges filtered annotated peaks. state_matrix Matrix chromatin-state fractions per cell (rows = cells, cols = states). erosion Data frame erosion scores per cell (optionally covariate-regressed). entropy Data frame entropy-based plasticity scores per cell (optionally covariate-regressed).","code":""},{"path":"https://smorabit.github.io/chromatic/reference/RunChromatic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RunChromatic — RunChromatic","text":"function orchestrates several steps: Annotates ATAC peak overlapping ChromHMM state. Filters peaks remove blacklisted/nonstandard regions optionally low-coverage peaks. Constructs cell--state matrix (fraction accessibility per state per cell). Computes erosion score (active vs. repressive chromatin balance). Computes entropy-based plasticity score (degree state heterogeneity per cell). helper functions AnnotatePeaks, ExcludeUncommonPeaks, ChromatinStateSigns, CalculateStateMatrix, ErosionScore, EntropyScore must defined return objects expected format.","code":""},{"path":"https://smorabit.github.io/chromatic/reference/RunChromatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunChromatic — RunChromatic","text":"","code":"if (FALSE) { # \\dontrun{ scores <- RunChromatic(     seurat_obj = atac_seurat,     chromHMM_states = chromHMM_mouse,     stoplist = blacklist_gr,     covariates = c(\"TSS.enrichment\",\"nCount_ATAC\") ) } # }"},{"path":[]},{"path":"https://smorabit.github.io/chromatic/news/index.html","id":"added-0-0-02","dir":"Changelog","previous_headings":"","what":"Added","title":"chromatic 0.0.02 (27-09-2025)","text":"scATAC-seq tutorial.","code":""},{"path":"https://smorabit.github.io/chromatic/news/index.html","id":"changes-0-0-02","dir":"Changelog","previous_headings":"","what":"Changes","title":"chromatic 0.0.02 (27-09-2025)","text":"None","code":""}]
